# -*- coding: utf-8 -*-
"""Streaming Service Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E0p7tgxSEF7DAXPo-TBGJLXaCZ5ftMU-

## Importing Necessary Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.offline as pyo
pyo.init_notebook_mode()
import plotly.express as px
# %matplotlib inline

"""## Reading the Dataset"""

data = pd.read_csv('moviestreams.csv')
data.head()

data.shape

cols = data.columns.tolist()

cols

data.drop(['Unnamed: 0','ID'],axis=1,inplace=True)

cols = data.columns.tolist()
cols

"""## Checking for Missing Values

Python identifies missing values as **Nan**
"""

data.isna()

data.isna().sum()

"""**NOTE** : Dropping a value in your dataset should be the last option to consider. There are better ways to deal with missing values in your dataset.

## Let's remove the **'+'** sign attached to the values in the **Age** column.
"""

data.dtypes

data['Age']

age_map = {'18+':18,'13+':13,'7+':7,'All':0,'16+':16}
data['AgeCopy'] = data['Age'].map(age_map)
data['AgeCopy']

"""## Let's remove the **'%'** sign attached to the values in the **Rotten Tomatoes** column."""

data['New_Rotten_Tomatoes'] = data['Rotten Tomatoes'].str.replace("%","")
for i in data['New_Rotten_Tomatoes']:
  if i==str:
    i.astype(int)
data['New_Rotten_Tomatoes']

"""## Visualisations"""

data['Age'].value_counts()

"""**Top 10 languages in Streaming Services**"""

data.Language.value_counts()

language = data.Language.value_counts().head(10)
language.index

language.values

language = data.Language.value_counts().head(10)

plt.figure(figsize=(15,8))
plt.title('Top 10 languages in streaming services')
sns.barplot(x=language.index,y=language.values)

from IPython.display import HTML
import plotly.express as px
fig = px.pie(data,
             values=language.values,
             names=language.index,
             title='Top 10 languages in Streaming Services',
             height=600)
HTML(fig.to_html())

"""**Number of Movies in specific age group in All services**"""

from IPython.display import HTML
import plotly.express as px
fig = px.bar(data,
             x=data['Age'].value_counts().index,
             y=data['Age'].value_counts(),
             title="Number of Movies in specific age group in All services",
             text=data['Age'].value_counts(),
             height=600)
fig.update_traces(texttemplate='%{text:.2s}', textposition='outside') #for the text to be outside.
HTML(fig.to_html())

"""**Number of Movies in specific age group in Netflix**"""

from IPython.display import HTML
import plotly.express as px
netflix_data=data[data['Netflix']==1]
fig = px.bar(netflix_data,
             x=netflix_data['Age'].value_counts().index,
             y=netflix_data['Age'].value_counts(),
             title="Number of Movies in specific age group in Netflix",
             text=netflix_data['Age'].value_counts(),
             height=600)
fig.update_traces(texttemplate='%{text:.2s}', textposition='outside') #for the text to be outside.
HTML(fig.to_html())

"""**Number of Movies in specific age group in Amazon Prime Video**"""

from IPython.display import HTML
import plotly.express as px
prime_data=data[data['Prime Video']==1]
fig = px.bar(prime_data,
             x=prime_data['Age'].value_counts().index,
             y=prime_data['Age'].value_counts(),
             title="Number of Movies in specific age group in Amazon Prime Video",
             text=prime_data['Age'].value_counts(),
             height=600)
fig.update_traces(marker_color='lightsalmon',texttemplate='%{text:.2s}', textposition='outside') #for the text to be outside.
HTML(fig.to_html())

"""**Number of Movies in specific age group in Disney+**"""

from IPython.display import HTML
import plotly.express as px
disney_data=data[data['Disney+']==1]
fig = px.bar(disney_data,
             x=disney_data['Age'].value_counts().index,
             y=disney_data['Age'].value_counts(),
             title="Number of Movies in specific age group in Amazon Prime Video",
             text=disney_data['Age'].value_counts(),
             height=600)
fig.update_traces(marker_color='lightsalmon',texttemplate='%{text:.2s}', textposition='outside') #for the text to be outside.
HTML(fig.to_html())

"""**Number of Movies in specific age group in Hulu**"""

from IPython.display import HTML
import plotly.express as px
hulu_data=data[data['Hulu']==1]
fig = px.bar(hulu_data,
             x=hulu_data['Age'].value_counts().index,
             y=hulu_data['Age'].value_counts(),
             title="Number of Movies in specific age group in Hulu Video",
             text=hulu_data['Age'].value_counts(),
             height=600)
fig.update_traces(marker_color='black',texttemplate='%{text:.2s}', textposition='outside') #for the text to be outside.
HTML(fig.to_html())

"""#**Rotten Tomatoes Score**

A Tomatometer score is calculated for a movie or TV show after it receives at least five reviews. When at least 60% of reviews for a movie or TV show are positive, a red tomato is displayed to indicate its Fresh status.

Rotten Tomatoes gives films a score out of 100 based on the averaged reviews of professional film critics. If a film gets a rating of 60 or more it gets a 'fresh' red tomato on the site. Less than 60 and it gets a rotten tomato.

## Rotten Tomatoes Ratings for overall services
"""

from IPython.display import HTML
import plotly.express as px

fig = px.bar(data,
             x=data['Rotten Tomatoes'].value_counts().index,
             y=data['Rotten Tomatoes'].value_counts(),
             title="Overall Rotten Tomato Ratings",
             text=data['Rotten Tomatoes'].value_counts(),
             height=600)
fig.update_traces(marker_color='blue',texttemplate='%{text:.2s}', textposition='outside') #for the text to be outside.
HTML(fig.to_html())

"""## Rotten Tomatoes rating for each service"""

rt_scores = pd.DataFrame({'Streaming Service': ["Prime Video", "Hulu","Disney+","NetFlix"],
                                    'Rotten Tomato Score' : [netflix_data['Rotten Tomatoes'].value_counts()[0],
                                                             prime_data['Rotten Tomatoes'].value_counts()[0],
                                                             disney_data['Rotten Tomatoes'].value_counts()[0],
                                                             hulu_data['Rotten Tomatoes'].value_counts()[0]]})
rt_scores

sorted_rt_score=rt_scores.sort_values(ascending=False, by="Rotten Tomato Score")
sorted_rt_score

fig = px.bar(sorted_rt_score,
             x=sorted_rt_score['Streaming Service'],
             y=sorted_rt_score['Rotten Tomato Score'],
             title="Rotten Tomato Ratings For Each Services",
             text=sorted_rt_score['Rotten Tomato Score'],
             height=600)
fig.update_traces(marker_color='purple',texttemplate='%{text:.2s}', textposition='outside') #for the text to be outside.
HTML(fig.to_html())

"""We can see that Prime Video has 260 Rotten Tomato Score

## IMDB Ratings
"""

fig = px.bar(data,
             y=data['IMDb'].value_counts(),
             x=data['IMDb'].value_counts().index,
             title="Overall IMDb Ratings For All Services",
             text=data['IMDb'].value_counts(),
             height=600)
fig.update_traces(marker_color='purple',texttemplate='%{text:.2s}', textposition='outside') #for the text to be outside.
HTML(fig.to_html())

"""####**Count Of Runtimes Of Movies**"""

RuntimeCount = pd.DataFrame(dict(data['Runtime'].value_counts().sort_values(ascending=False)[:10]).items(),
             columns=['Runtime', 'Count'])

RuntimeCount

fig = px.bar(data,
             x=RuntimeCount['Runtime'],
             y=RuntimeCount['Count'],
             title="Count Of Runtimes Of Movies",
             text=RuntimeCount['Runtime'],
             height=600)
fig.update_traces(marker_color='purple',texttemplate='%{text:.2s}', textposition='outside') #for the text to be outside.
HTML(fig.to_html())

"""Most of the movies have run time of around 90 minutes.

**Directors And Their Count Of Movies They Have Directed**
"""

new_data=data[data['Directors']!=np.nan]

directors_count = dict()

direc_in_data = list(new_data['Directors'])

direc_in_data

data['Directors']=data['Directors'].astype(str) #run below code b4 this
data['Directors']

new_data = data[data['Directors'] !=np.nan]
directors_count = dict()
direc_in_data = list(new_data['Directors'])
for xdir in direc_in_data:
    curr_dirs = xdir.split(",")
    for xd in curr_dirs:
        if xd in directors_count.keys():
            directors_count[xd] = directors_count.get(xd) + 1
        else:
            directors_count[xd] = 1

dir_count = pd.DataFrame(directors_count.items(), columns=['Director', 'Count'])
dir_count = dir_count.sort_values(ascending=False,by='Count')
dir_count

dir_count.head(20)

dir_count = dir_count.drop(56,axis=0)
dir_count

fig = px.bar(dir_count,
             x=dir_count['Director'],
             y=dir_count['Count'],
             title="Directors And The Count Of Movies They Have Directed",
             text=dir_count['Count'],
             height=600)
fig.update_traces(marker_color='purple',texttemplate='%{text:.2s}', textposition='outside') #for the text to be outside.
HTML(fig.to_html())

"""We can see from above that Jay Chapman has directed most of the movies.

Below is the list of movies directed by Jay Chapman
"""

data[data['Directors']=='Jay Chapman'][['Directors','Title','Genres']]

"""###**Exploring Genres**"""

genres_= dict(data['Genres'].value_counts())
count_genres = dict()
for g,count in genres_.items():
    g = g.split(",")
    for i in g:
        if i in count_genres.keys():
            count_genres[i] = count_genres.get(i)+1
        else:
            count_genres[i] = 1

count_genres

count_genres_df = pd.DataFrame(count_genres.items(), columns=['Genre', 'Count'])
count_genres_df

fig = px.bar(count_genres_df,
             x=count_genres_df['Genre'],
             y=count_genres_df['Count'],
             title="Genre And their Counts",
             text=count_genres_df['Count'],
             height=600)
fig.update_traces(marker_color='lightsalmon',texttemplate='%{text:.2s}', textposition='outside') #for the text to be outside.
HTML(fig.to_html())

"""Most of the movies are **Drama** hence it has the highest count.

###**What Are The Top Movies On Each Platform?**

**On NetFlix**
"""

data_netflix_top = netflix_data[netflix_data['IMDb']>8.5]
data_netflix_top = data_netflix_top[['Title', 'IMDb']].sort_values(ascending=False, by='IMDb')
data_netflix_top

fig = px.bar(data_netflix_top,
             x=data_netflix_top['Title'],
             y=data_netflix_top['IMDb'],
             title="Top Movies On Netflix",
             text=data_netflix_top['IMDb'],
             height=800)
fig.update_traces(marker_color='brown',texttemplate='%{text:.2s}', textposition='outside') #for the text to be outside.
HTML(fig.to_html())

"""**On Amazon Prime**"""

amz_top = prime_data[prime_data['IMDb']>8.5]
amz_top = amz_top[['Title', 'IMDb']].sort_values(ascending=False, by='IMDb').head(20)
amz_top

fig = px.bar(amz_top,
             x=amz_top['Title'],
             y=amz_top['IMDb'],
             title="Top Movies On Amazon Prime",
             text=amz_top['IMDb'],
             height=800)
fig.update_traces(marker_color='brown',texttemplate='%{text:.2s}', textposition='outside') #for the text to be outside.
HTML(fig.to_html())

"""**On Disney+**"""

disney_top = disney_data[disney_data['IMDb']>8.5]
disney_top = disney_top[['Title', 'IMDb']].sort_values(ascending=False, by='IMDb')
disney_top

fig = px.bar(disney_top,
             x=disney_top['Title'],
             y=disney_top['IMDb'],
             title="Top Movies On Disney+",
             text=disney_top['IMDb'],
             height=800)
fig.update_traces(marker_color='lightblue',texttemplate='%{text:.2s}', textposition='outside') #for the text to be outside.
HTML(fig.to_html())

"""**On Hulu**"""

hulu_top = hulu_data[hulu_data['IMDb']>8.5]
hulu_top = hulu_top[['Title', 'IMDb']].sort_values(ascending=False, by='IMDb')
hulu_top

fig = px.bar(hulu_top,
             x=hulu_top['Title'],
             y=hulu_top['IMDb'],
             title="Top Movies On Hulu",
             text=hulu_top['IMDb'],
             height=800)
fig.update_traces(marker_color='purple',texttemplate='%{text:.2s}', textposition='outside') #for the text to be outside.
HTML(fig.to_html())

data

data['Runtime']

"""## What is the average streaming time on each platform?

#### On Netflix
"""

data[data['Netflix']==1][['Runtime']].mean()

"""#### On Prime Video"""

data[data['Prime Video']==1][['Runtime']].mean()

"""#### On Disney+"""

data[data['Disney+']==1][['Runtime']].mean()

"""#### On Hulu"""

data[data['Hulu']==1][['Runtime']].mean()

"""## What are the movies the were created before 1990?"""

data['Year']

data[data['Year']<1990][['Title','Year']].head(20)

